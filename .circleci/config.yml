version: 2.1
# executors define an underline tech or environment where to run the job
executors: 
  app-executor:
<<<<<<< HEAD
    # this the docker image
    docker: 
      # the version of the node I am using can be also named "latest"
      - image: circleci/node:15.4.0 
    #and this is my directory name
    working_directory: ~/repository 
#alias are like variables it allows to create reusable variables
aliases: 
=======
    docker: # this the docker image
      - image: circleci/node:15.4.0 
      # the version of the node I am using can be also named "latest"
    working_directory: ~/repository 
    #and this is my directory name
aliases: #alias are like variables it allows to create reusable variables
>>>>>>> 2e54af1755984b0ac257ad01d84f4023dfd6034d
  - &show-current-branch-name
    # this command is just to display the branch
    run: 
      name: Show current branch
<<<<<<< HEAD
      # this is the first command to show the current branch with the variable from circleCI (Masterbranch)
      command: echo ${CURRENT_BRANCH} 
=======
      command: echo ${CURRENT_BRANCH} 
      # this is the first command to show the current branch with the variable from circleCI (Masterbranch)
>>>>>>> 2e54af1755984b0ac257ad01d84f4023dfd6034d
  - &restore-cache
    restore_cache: 
      keys: 
        - app-{{ checksum "package.json"}}
<<<<<<< HEAD
        # this part check if we have the cach if not we gonna move to save
        - app- 
=======
        - app- 
        # this part check if we have the cach if not we gonna move to save
>>>>>>> 2e54af1755984b0ac257ad01d84f4023dfd6034d
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    # here we save the cach if it was not saved before
    save_cache: 
      paths:
<<<<<<< HEAD
        # I am saving the node module so that I don't have to dowmload the modules ork packages from scratch
        - node_modules 
      #so i save using the same key.
      key: app-{{ checksum "package.json"}} 
=======
        - node_modules 
        # I am saving the node module so that I don't have to dowmload the modules ork packages from scratch
      key: app-{{ checksum "package.json"}} 
      #so i save using the same key.
>>>>>>> 2e54af1755984b0ac257ad01d84f4023dfd6034d
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      # not using the -alpine version command so we can not APK to install what ever I want
      command: | 
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
<<<<<<< HEAD
      # npm Install npm run build
      command: | 
=======
      command: | 
      # npm Install npm run build
>>>>>>> 2e54af1755984b0ac257ad01d84f4023dfd6034d
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

# this is to creat a job
jobs: 
  build:
    executor: app-executor
    steps: 
      # the first part of the steps is to check the branch then the cash
      - checkout 
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  deploy-to-aws-s3:
    executor: app-executer
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "main"]
            then
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_PRODUCTION_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging"]
            then
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_DEV_BUCKET} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_PRODUCTION_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_STAGING_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DEV_DISTRIBUTION_ID} --paths /\*
            fi

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - main