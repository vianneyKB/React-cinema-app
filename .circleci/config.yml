version: 2.1

jobs: # this is to creat a job
  build:
    docker: # this the docker image
      - image: circleci/node:15.4.0 # the version of the node I am using can be also named "latest"
    working_directory: ~/repository #and this is my directory name
    steps: 
      - checkout # the first part of the steps is to check the branch then the cash
      - run: # this command is just to display the branch
          name: Show current branch
          command: echo ${CURRENT_BRANCH} # this is the first command to show the current branch with the variable from circleCI (Masterbranch)
      - restore_cache: 
          keys: 
            - app-{{ checksum "package.json"}}
            - app- # this part check if we have the cach if not we gonna move to save
      - run:
          name: Install dependencies
          command: npm install
      - save_cache: # here we save the cach if it was not saved before
          paths:
            - node_modules # I am saving the node module so that I don't have to dowmload the modules ork packages from scratch
          key: app-{{ checksum "package.json"}} #so i save using the same key

  deploy-to-aws-s3:
    docker:
      - image: circleci/node:15.4.0
    working_directory: ~/repository
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - run:
          name: Installing AWS CLI
          working_directory: /
          command: | # not using the -alpine version command so we can not APK to install what ever I want
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - run:
          name: Build Project
          command: | # npm Install npm run build
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CURRENT_BRANCH}" == "main"]
            then
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_PRODUCTION_BUCKET} --delete
            elif [ "${CURRENT_BRANCH}" == "staging"]
            then
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repository/build s3://${AWS_DEV_BUCKET} --delete
            fi

  deploy-to-aws-cloudfront:
    docker:
      - image: circleci/node:15.4.0
    working_directory: ~/repository
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - run:
          name: Instaliling AWS CLI
          working_directory: /
          command: | # not using the -alpine version command so we can not APK to install what ever I want
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - run:
          name: Build Project
          command: |
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront
            if [ "${CURRENT_BRANCH}" == "main"]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_PRODUCTION_DISTRIBUTION_ID} --paths /\*
            elif [ "${CURRENT_BRANCH}" == "staging"]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_STAGING_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DEV_DISTRIBUTION_ID} --paths /\*
            fi

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - main